"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_lib_fetch-helper_ts";
exports.ids = ["_ssr_lib_fetch-helper_ts"];
exports.modules = {

/***/ "(ssr)/./lib/fetch-helper.ts":
/*!*****************************!*\
  !*** ./lib/fetch-helper.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   safeFetch: () => (/* binding */ safeFetch),\n/* harmony export */   safePostFormData: () => (/* binding */ safePostFormData),\n/* harmony export */   safePostJSON: () => (/* binding */ safePostJSON)\n/* harmony export */ });\n// Enhanced fetch helper with better error handling\nasync function safeFetch(url, options = {}) {\n    try {\n        const response = await fetch(url, options);\n        // Get response text first to handle HTML error pages\n        const responseText = await response.text();\n        // Check if the response is HTML (common error case)\n        if (responseText.trim().startsWith(\"<!DOCTYPE\") || responseText.trim().startsWith(\"<html\")) {\n            return {\n                success: false,\n                error: `Server returned HTML error page (status: ${response.status}). This usually means the API route crashed or the service is not running.`,\n                status: response.status\n            };\n        }\n        // Check if response is empty\n        if (!responseText.trim()) {\n            return {\n                success: false,\n                error: \"Empty response from server\",\n                status: response.status\n            };\n        }\n        // Try to parse as JSON\n        let data;\n        try {\n            data = JSON.parse(responseText);\n        } catch (parseError) {\n            return {\n                success: false,\n                error: `Invalid JSON response from server: ${parseError instanceof Error ? parseError.message : \"Unknown parse error\"}`,\n                status: response.status\n            };\n        }\n        if (!response.ok) {\n            return {\n                success: false,\n                error: data.error || `HTTP ${response.status}: ${response.statusText}`,\n                status: response.status,\n                data\n            };\n        }\n        return {\n            success: true,\n            data,\n            status: response.status\n        };\n    } catch (error) {\n        return {\n            success: false,\n            error: error instanceof Error ? error.message : \"Network error occurred\",\n            status: 0\n        };\n    }\n}\n// Helper for POST requests with JSON body\nasync function safePostJSON(url, body) {\n    return safeFetch(url, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n    });\n}\n// Helper for POST requests with FormData body\nasync function safePostFormData(url, formData) {\n    return safeFetch(url, {\n        method: \"POST\",\n        body: formData\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9saWIvZmV0Y2gtaGVscGVyLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQVNBLG1EQUFtRDtBQUM1QyxlQUFlQSxVQUFVQyxHQUFXLEVBQUVDLFVBQXVCLENBQUMsQ0FBQztJQUNwRSxJQUFJO1FBQ0YsTUFBTUMsV0FBVyxNQUFNQyxNQUFNSCxLQUFLQztRQUVsQyxxREFBcUQ7UUFDckQsTUFBTUcsZUFBZSxNQUFNRixTQUFTRyxJQUFJO1FBRXhDLG9EQUFvRDtRQUNwRCxJQUFJRCxhQUFhRSxJQUFJLEdBQUdDLFVBQVUsQ0FBQyxnQkFBZ0JILGFBQWFFLElBQUksR0FBR0MsVUFBVSxDQUFDLFVBQVU7WUFDMUYsT0FBTztnQkFDTEMsU0FBUztnQkFDVEMsT0FBTyxDQUFDLHlDQUF5QyxFQUFFUCxTQUFTUSxNQUFNLENBQUMsMEVBQTBFLENBQUM7Z0JBQzlJQSxRQUFRUixTQUFTUSxNQUFNO1lBQ3pCO1FBQ0Y7UUFFQSw2QkFBNkI7UUFDN0IsSUFBSSxDQUFDTixhQUFhRSxJQUFJLElBQUk7WUFDeEIsT0FBTztnQkFDTEUsU0FBUztnQkFDVEMsT0FBTztnQkFDUEMsUUFBUVIsU0FBU1EsTUFBTTtZQUN6QjtRQUNGO1FBRUEsdUJBQXVCO1FBQ3ZCLElBQUlDO1FBQ0osSUFBSTtZQUNGQSxPQUFPQyxLQUFLQyxLQUFLLENBQUNUO1FBQ3BCLEVBQUUsT0FBT1UsWUFBWTtZQUNuQixPQUFPO2dCQUNMTixTQUFTO2dCQUNUQyxPQUFPLENBQUMsbUNBQW1DLEVBQUVLLHNCQUFzQkMsUUFBUUQsV0FBV0UsT0FBTyxHQUFHLHNCQUFzQixDQUFDO2dCQUN2SE4sUUFBUVIsU0FBU1EsTUFBTTtZQUN6QjtRQUNGO1FBRUEsSUFBSSxDQUFDUixTQUFTZSxFQUFFLEVBQUU7WUFDaEIsT0FBTztnQkFDTFQsU0FBUztnQkFDVEMsT0FBT0UsS0FBS0YsS0FBSyxJQUFJLENBQUMsS0FBSyxFQUFFUCxTQUFTUSxNQUFNLENBQUMsRUFBRSxFQUFFUixTQUFTZ0IsVUFBVSxDQUFDLENBQUM7Z0JBQ3RFUixRQUFRUixTQUFTUSxNQUFNO2dCQUN2QkM7WUFDRjtRQUNGO1FBRUEsT0FBTztZQUNMSCxTQUFTO1lBQ1RHO1lBQ0FELFFBQVFSLFNBQVNRLE1BQU07UUFDekI7SUFFRixFQUFFLE9BQU9ELE9BQU87UUFDZCxPQUFPO1lBQ0xELFNBQVM7WUFDVEMsT0FBT0EsaUJBQWlCTSxRQUFRTixNQUFNTyxPQUFPLEdBQUc7WUFDaEROLFFBQVE7UUFDVjtJQUNGO0FBQ0Y7QUFFQSwwQ0FBMEM7QUFDbkMsZUFBZVMsYUFBYW5CLEdBQVcsRUFBRW9CLElBQVM7SUFDdkQsT0FBT3JCLFVBQVVDLEtBQUs7UUFDcEJxQixRQUFRO1FBQ1JDLFNBQVM7WUFBRSxnQkFBZ0I7UUFBbUI7UUFDOUNGLE1BQU1SLEtBQUtXLFNBQVMsQ0FBQ0g7SUFDdkI7QUFDRjtBQUVBLDhDQUE4QztBQUN2QyxlQUFlSSxpQkFBaUJ4QixHQUFXLEVBQUV5QixRQUFrQjtJQUNwRSxPQUFPMUIsVUFBVUMsS0FBSztRQUNwQnFCLFFBQVE7UUFDUkQsTUFBTUs7SUFDUjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnV0dXJvcGFsLWRhc2hib2FyZC8uL2xpYi9mZXRjaC1oZWxwZXIudHM/Y2JkZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcidcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU2FmZVJlc3BvbnNlPFQgPSBhbnk+IHtcclxuICBzdWNjZXNzOiBib29sZWFuXHJcbiAgZGF0YT86IFRcclxuICBlcnJvcj86IHN0cmluZ1xyXG4gIHN0YXR1cz86IG51bWJlclxyXG59XHJcblxyXG4vLyBFbmhhbmNlZCBmZXRjaCBoZWxwZXIgd2l0aCBiZXR0ZXIgZXJyb3IgaGFuZGxpbmdcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNhZmVGZXRjaCh1cmw6IHN0cmluZywgb3B0aW9uczogUmVxdWVzdEluaXQgPSB7fSk6IFByb21pc2U8U2FmZVJlc3BvbnNlPiB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsLCBvcHRpb25zKVxyXG4gICAgXHJcbiAgICAvLyBHZXQgcmVzcG9uc2UgdGV4dCBmaXJzdCB0byBoYW5kbGUgSFRNTCBlcnJvciBwYWdlc1xyXG4gICAgY29uc3QgcmVzcG9uc2VUZXh0ID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpXHJcbiAgICBcclxuICAgIC8vIENoZWNrIGlmIHRoZSByZXNwb25zZSBpcyBIVE1MIChjb21tb24gZXJyb3IgY2FzZSlcclxuICAgIGlmIChyZXNwb25zZVRleHQudHJpbSgpLnN0YXJ0c1dpdGgoJzwhRE9DVFlQRScpIHx8IHJlc3BvbnNlVGV4dC50cmltKCkuc3RhcnRzV2l0aCgnPGh0bWwnKSkge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICAgIGVycm9yOiBgU2VydmVyIHJldHVybmVkIEhUTUwgZXJyb3IgcGFnZSAoc3RhdHVzOiAke3Jlc3BvbnNlLnN0YXR1c30pLiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIEFQSSByb3V0ZSBjcmFzaGVkIG9yIHRoZSBzZXJ2aWNlIGlzIG5vdCBydW5uaW5nLmAsXHJcbiAgICAgICAgc3RhdHVzOiByZXNwb25zZS5zdGF0dXNcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBDaGVjayBpZiByZXNwb25zZSBpcyBlbXB0eVxyXG4gICAgaWYgKCFyZXNwb25zZVRleHQudHJpbSgpKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXHJcbiAgICAgICAgZXJyb3I6ICdFbXB0eSByZXNwb25zZSBmcm9tIHNlcnZlcicsXHJcbiAgICAgICAgc3RhdHVzOiByZXNwb25zZS5zdGF0dXNcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBUcnkgdG8gcGFyc2UgYXMgSlNPTlxyXG4gICAgbGV0IGRhdGFcclxuICAgIHRyeSB7XHJcbiAgICAgIGRhdGEgPSBKU09OLnBhcnNlKHJlc3BvbnNlVGV4dClcclxuICAgIH0gY2F0Y2ggKHBhcnNlRXJyb3IpIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgICBlcnJvcjogYEludmFsaWQgSlNPTiByZXNwb25zZSBmcm9tIHNlcnZlcjogJHtwYXJzZUVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBwYXJzZUVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBwYXJzZSBlcnJvcid9YCxcclxuICAgICAgICBzdGF0dXM6IHJlc3BvbnNlLnN0YXR1c1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmICghcmVzcG9uc2Uub2spIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgICBlcnJvcjogZGF0YS5lcnJvciB8fCBgSFRUUCAke3Jlc3BvbnNlLnN0YXR1c306ICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH1gLFxyXG4gICAgICAgIHN0YXR1czogcmVzcG9uc2Uuc3RhdHVzLFxyXG4gICAgICAgIGRhdGFcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBzdWNjZXNzOiB0cnVlLFxyXG4gICAgICBkYXRhLFxyXG4gICAgICBzdGF0dXM6IHJlc3BvbnNlLnN0YXR1c1xyXG4gICAgfVxyXG4gICAgXHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnTmV0d29yayBlcnJvciBvY2N1cnJlZCcsXHJcbiAgICAgIHN0YXR1czogMFxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuLy8gSGVscGVyIGZvciBQT1NUIHJlcXVlc3RzIHdpdGggSlNPTiBib2R5XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzYWZlUG9zdEpTT04odXJsOiBzdHJpbmcsIGJvZHk6IGFueSk6IFByb21pc2U8U2FmZVJlc3BvbnNlPiB7XHJcbiAgcmV0dXJuIHNhZmVGZXRjaCh1cmwsIHtcclxuICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXHJcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeShib2R5KVxyXG4gIH0pXHJcbn1cclxuXHJcbi8vIEhlbHBlciBmb3IgUE9TVCByZXF1ZXN0cyB3aXRoIEZvcm1EYXRhIGJvZHlcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNhZmVQb3N0Rm9ybURhdGEodXJsOiBzdHJpbmcsIGZvcm1EYXRhOiBGb3JtRGF0YSk6IFByb21pc2U8U2FmZVJlc3BvbnNlPiB7XHJcbiAgcmV0dXJuIHNhZmVGZXRjaCh1cmwsIHtcclxuICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgYm9keTogZm9ybURhdGFcclxuICB9KVxyXG59ICJdLCJuYW1lcyI6WyJzYWZlRmV0Y2giLCJ1cmwiLCJvcHRpb25zIiwicmVzcG9uc2UiLCJmZXRjaCIsInJlc3BvbnNlVGV4dCIsInRleHQiLCJ0cmltIiwic3RhcnRzV2l0aCIsInN1Y2Nlc3MiLCJlcnJvciIsInN0YXR1cyIsImRhdGEiLCJKU09OIiwicGFyc2UiLCJwYXJzZUVycm9yIiwiRXJyb3IiLCJtZXNzYWdlIiwib2siLCJzdGF0dXNUZXh0Iiwic2FmZVBvc3RKU09OIiwiYm9keSIsIm1ldGhvZCIsImhlYWRlcnMiLCJzdHJpbmdpZnkiLCJzYWZlUG9zdEZvcm1EYXRhIiwiZm9ybURhdGEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./lib/fetch-helper.ts\n");

/***/ })

};
;